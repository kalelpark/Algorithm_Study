import sys

test_case = int(sys.stdin.readline())

for _ in range(test_case):
    start, end = map(int, sys.stdin.readline().split())
    distance = (end-start)
    
    squared = 1                     # 미리 숫자를 지정함으로써 늘어가는 방향으로 계산할 줄 알아야 한다. 
    tap = 3

    if distance == 1:               # 앞부분에 조그만한 예외조건이 있으면, 미리 제외해주고 문풀 하는 것이 좋다.
        print(1)
    else:
        while 1:
            if (squared**2) < distance <= ((squared+1)**2):
                break
            else:
                squared += 1
                tap += 2
        
        if (squared**2) < distance <= (squared**2) + ((((squared+1)**2) - (squared**2))//2):
            print(tap - 1)
        else:
            print(tap)


# 이 문제는 첫번째부터 ~ 마지막까지의 거리를 파악하는 문제이다.
# 먼저 예외 조건을 먼저 파악해주자. 반드시 도착하기 전 이동이 1이 되어야 한다. 
# 알고리즘의 구상이 안되면, 나열해 보는 것이 좋다.

# ** 항상 말해보지만, 문제풀떄 손이 움직여야 문제 푸는 방법을 빨리 획득할 수 있다.
# ------------------------------------------------------------

# 거리가 1 인경우 1                              1번                1번
# 거리가 2 인경우 1 1                            2번                
# 거리가 3 인경우 1 1 1                          3번
# 거리가 4 인경우 1 2 1                          3번                3번
# 거리가 5 인경우 1 2 1 1                        4번
# 거리가 6 인경우 1 2 2 1                        4번
# 거리가 7 인경우 1 2 2 1 1                      5번
# 거리가 8 인경우 1 2 2 2 1                      5번
# 거리가 9 인경우 1 2 3 2 1                      5번                5번   
# 거리가 10인경우 1 2 3 2 1 1                    6번
# 거리가 11인경우 1 2 3 2 2 1                    6번
# 거리가 12인경우 1 2 3 3 2 1                    6번                           
# 거리가 13인경우 1 2 3 3 2 1 1                  7번
# 거리가 14인경우 1 2 3 3 2 2 1                  7번
# 거리가 15인경우 1 2 3 3 3 2 1                  7번
# 거리가 16인경우 1 2 3 4 3 2 1                  7번                7번
# 거리가 17인경우 1 2 3 4 3 2 1 1                8번                

# ----- 위의 수를 보면, 제곱근들이 자연수를 가질 경우를 기준으로 나뉘었음을 파악할 수 있다.
# ----- 규칙을 찾았으면, ---> 규칙을 수학적 식으로 "일반화"하는 과정을 할줄 알아야 한다.